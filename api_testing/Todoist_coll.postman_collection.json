{
	"info": {
		"_postman_id": "8b70df4a-5e83-47ef-a774-5e4d913049f0",
		"name": "Todoist_coll",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "getAllProjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Vertify status code is 200 -> Success",
									"pm.test(\"Verify status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllProjects-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify not valid page",
									"pm.test(\"Page not found message received\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"404 page not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/allprojects",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"allprojects"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Vertify status code is 200 -> Success",
									"pm.test(\"Verify status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Verify Project Name",
									"const jsonData = pm.response.json();",
									"pm.test(\"Project should be created with given name\" , function(){",
									"    pm.expect(jsonData.name).eq(pm.environment.get(\"projectName\"))",
									"})",
									"",
									"pm.environment.set(\"projectId\", jsonData.id);",
									"",
									"pm.test(\"validate Schema\", function(){",
									"    const expectedSchema = ({",
									"        \"id\":{",
									"            \"type\" : \"numeric\"",
									"        },",
									"        \"name\":{",
									"            \"type\" : \"string\"",
									"        },",
									"        \"favorite\":{",
									"            \"completed\" : \"boolean\",",
									"        }",
									"    });",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"projectName\", \"Weekly Project\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/projects?name={{projectName}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects"
							],
							"query": [
								{
									"key": "name",
									"value": "{{projectName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewProject-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Bad request",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify required name",
									"pm.test(\"Required project name\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"Empty name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/projects",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify success test",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.success;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Another project\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateProject-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Bad request",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"// Verify valid data type",
									"pm.test(\"Expected numeric not string\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"JSON decode error: unexpected string at pos 21\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"color\": \"Pink\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Vertify status code is 200 -> Success",
									"pm.test(\"Verify status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var projectId = pm.environment.get(projectId);",
									"pm.test(\"Project id is correct\", function () {",
									"    pm.expect(jsonData.projectId).to.eql(projectId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getProject-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Not found",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify valid project Id",
									"pm.test(\"Invalid project Id\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects/{{invalidProjectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{invalidProjectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify success test",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.success;",
									"});",
									"",
									"pm.environment.unset(\"projectId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects/{{projectId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteProject-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Not found page",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/projects/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"projects",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "getActiveTasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Vertify status code is 200 -> Success",
									"pm.test(\"Verify status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate Content-Type exists and its content",
									"pm.test(\"Content-Type header exists and its value is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "getActiveTasks-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify not valid page",
									"pm.test(\"Page not found message received\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"404 page not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/alltasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"alltasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate Schema\", function(){",
									"    const expectedSchema = ({",
									"        \"id\":{",
									"            \"type\" : \"numeric\"",
									"        },",
									"        \"content\":{",
									"            \"type\" : \"string\"",
									"        },",
									"        \"favorite\":{",
									"            \"completed\" : \"boolean\",",
									"        }",
									"    });",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"})",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"taskId\", jsonData.id);",
									"",
									"//Vertify status code is 200 -> Success",
									"pm.test(\"Verify status code\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Buy Almond Milk\", \n    \"due_string\": \"tomorrow at 12:00\", \n    \"due_lang\": \"en\", \n    \"priority\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewTask-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Bad request",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify required content",
									"pm.test(\"Required content\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"Empty content\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "getActiveTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {",
									"    pm.response.to.be.success;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getActiveTask-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Not found page",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify valid project Id",
									"pm.test(\"Invalid task Id\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{invalidTaskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{invalidTaskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {",
									"    pm.response.to.be.success;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Buy Almond Milk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateTask-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Bad request",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify valid data type",
									"pm.test(\"Expected numeric not string\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"JSON decode error: unexpected string at pos 24\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"High\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "closeTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {",
									"    pm.response.to.be.success;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/close",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "closeTask-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Not found page",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks//close",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "reopenTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {",
									"    pm.response.to.be.success;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}/reopen",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "reopenTask-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Bad request",
									"pm.test(\"Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{invalidTaskId}}/reopen",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{invalidTaskId}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {",
									"    pm.response.to.be.success;",
									"});",
									"",
									"pm.environment.unset(\"taskId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteTask-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Not found page",
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 900ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(900);",
					"});",
					"",
					""
				]
			}
		}
	]
}